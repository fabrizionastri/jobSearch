import type { Job } from '@/api/types'

import { defineStore } from 'pinia'

import { useUserStore } from '@/stores/user'

import getJobs from '@/api/getJobs'
// this approach is used to avoid typos
export const FETCH_JOBS = 'FETCH_JOBS'
export const UNIQUE_ORGANIZATIONS = 'UNIQUE_ORGANIZATIONS'
export const UNIQUE_JOB_TYPES = 'UNIQUE_JOB_TYPES'
export const UNIQUE_DEGREES = 'UNIQUE_DEGREES'
export const FILTERED_JOBS_BY_ORGANIZATION = 'FILTERED_JOBS_BY_ORGANIZATION'
export const FILTERED_JOBS_BY_JOB_TYPE = 'FILTERED_JOBS_BY_JOB_TYPE'
export const FILTERED_JOBS_BY_DEGREE = 'FILTERED_JOBS_BY_DEGREE'
export const FILTERED_JOBS = 'FILTERED_JOBS'

export interface JobsState {
  jobs: Job[]
}

export const useJobsStore = defineStore('jobs', {
  state: (): JobsState => ({ jobs: [] }),
  actions: {
    async [FETCH_JOBS]() {
      const results = await getJobs()
      this.jobs = results
    }
  },
  getters: {
    [UNIQUE_ORGANIZATIONS](state) {
      const uniqueOrganizations = new Set<string>()
      state.jobs.forEach((job) => {
        uniqueOrganizations.add(job.organization)
      })
      return [...uniqueOrganizations].sort()
    },
    [UNIQUE_JOB_TYPES](state) {
      const uniqueJobTypes = new Set<string>()
      state.jobs.forEach((job) => {
        uniqueJobTypes.add(job.jobType)
      })
      return [...uniqueJobTypes].sort()
    },
    [UNIQUE_DEGREES](state) {
      const uniqueDegrees = new Set<string>()
      state.jobs.forEach((job) => {
        uniqueDegrees.add(job.degree)
      })
      return [...uniqueDegrees].sort()
    },
    [FILTERED_JOBS](state): Job[] {
      const userStore = useUserStore()
      const selectedOrganizations = userStore.selectedOrganizations
      const selectedJobTypes = userStore.selectedJobTypes
      const selectedDegrees = userStore.selectedDegrees
      return state.jobs.filter(
        (job) =>
          (!selectedOrganizations.length || selectedOrganizations.includes(job.organization)) &&
          (!selectedJobTypes.length || selectedJobTypes.includes(job.jobType)) &&
          (!selectedDegrees.length || selectedDegrees.includes(job.degree))
      )
    }
  }
})
